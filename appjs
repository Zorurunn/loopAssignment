// 1,2.  array sum, average
function sumAndAverageArray(arr) {
    let i = 0;
    let sum = 0;
    let average = 0;
    while (i < arr.length) {
        sum += arr[i];
        i++;
    }
    average = sum / arr.length;
    console.log('Sum: ' + sum);
    console.log('Average: ' + average);
}
let arraydesu = [46, 1, 2, 3, 4, 5, 7, 8, 9, 15];
sumAndAverageArray([2, 4, 6, 8, 10]);

// 3. a toonii b zereg
function zereg(num1, num2) {
    let result = 0, i = 0;
    for (i = 0; i < num2; i++) {
        if (i == 0) {
            result = num1;
        } else {
            result = (result * num1)
        }
    }
    return result;
}

console.log(zereg(2, 4));

// 4. array find max value 

function arrayMax(arr) {
    let max = 0, index = null;
    for (i = 0; i < arr.length; i++) {
        if (max <= arr[i]) {
            max = arr[i];
            index = i;
        }
    }
    return [index, max];
}
console.log("max array: " + arrayMax([3, 5, 1, 7, 10, -2]));

// 5.  string urvuu butsaah 
function urvuuStr(str) {
    let newString = "";
    for (i = 0; i < str.length; i++) {
        newString = newString + str[str.length - (i + 1)];
    }
    return newString;
}
console.log(urvuuStr('hello'));

// 6. String temdegt dawhardsan eseh
function checkUnique(str) {
    let checkStr = "", result = true;
    for (i = 0; i < str.length; i++) {
        checkStr = str[i];
        for (let j = i + 1; j < str.length; j++) {
            if (checkStr === str[j]) {
                return false;
            }
        }
    }
    return true;
}
console.log(checkUnique("absploass"));

// 7. massive ogtloltsol
function arrayInstrection(arr1, arr2) {
    let map = {};
    let newArr = [];
    for (i = 0; i < arr1.length; i++) {
        for (j = 0; j < arr2.length; j++) {
            if (arr1[i] === arr2[j]) {
                newArr.push(arr1[i]);
            }
        }
    }
    return newArr;
}
const arr1 = [1, 2, 3, 4, 5, 6, 5, 1, 1], arr2 = [7, 8, 9, 10, 1, 2, 5];
console.log(arrayInstrection(arr1, arr2));

// 8. * pyramid
function pyramid(num) {
    let od = "*";
    let space = " ", too = 0;
    for (i = 0; i < num; i++) {
        if (i == 0) {
            spaceNum = (num * 2) - (i + 1);
            too = 1;
            console.log(space.repeat(spaceNum) + od.repeat(too));
        } else {
            too = too + 2;
            spaceNum = (num * 2) - (i + 1);
            console.log(space.repeat(spaceNum) + od.repeat(too));
        }
    }
    return true;
}
pyramid(15);

// 9. toonii factorial
function factorial(num) {
    let factNum = 1;
    for (i = 1; i <= num; i++) {
        factNum = factNum * i;
    }
    return factNum;
}
console.log('factorial ' + factorial(5));

// 10. n too hurtelh tegsh too

function evenNumbers(num) {
    let arr = [];
    for (i = 0; i <= num; i += 2) {
        arr.push(i);
    }
    return arr;
}
console.log(evenNumbers(10));

// 11. falindrom true false
function palindrom(num) {
    let n = num;
    let arr = [];
    let result = true;
    while (n >= 1) {
        arr.push(n % 10);
        n = Math.trunc(n = n / 10);
    }
    for (i = 0; i < arr.length; i++) {
        if (arr[i] !== arr[arr.length - (i + 1)]) {
            result = false;
        }
    }
    return result;
}

console.log(palindrom(121));

// 12. Anhnii too mun eseh
function anhniiToo(num) {
    let result = true;
    for (i = 2; i < + Math.floor(num / 2); i++) {
        if (num % i === 0) {
            result = false;
            break;
        }
    }
    return result;
}
console.log(anhniiToo(1313))

// 13. n too hurtelh buh anhnii too
function buhAnhniiToo(num) {
    let arr = [], res = true, save = 0;
    for (i = 0; i < num; i++) {
        save = num - i;
        if (save === 1) {
            res = true;
        } else {
            for (j = 2; j <= Math.floor(save / 2); j++) {
                if (save % j === 0) {
                    res = false;
                    break;
                }
            }
        }

        if (res) {
            arr.push(save);
        }
        res = true;
    }
    return arr;
}
console.log(buhAnhniiToo(20))

// 14. n too hurtelh fibonacci hewle 

function fibonacci(num) {
    let arr = [0, 1];
    for (i = 0; i < num; i++) {
        arr.push(arr[arr.length - 2] + arr[arr.length - 1]);
        if ((arr[arr.length - 2] + arr[arr.length - 1]) > num) {
            break;
        }
    }
    return arr;
}
console.log("fibonacci " + fibonacci(10))

// 15. Өгөгдсөн массивийн давхцсан тоонуудыг арилгаад буцаа. ([1,2,2,3,4,3] -> [1,2,3,4])

function removeSame(arr) {
    let newArr = [], result = true;
    for (i = 0; i < arr.length; i++) {
        if (i === 0) {
            newArr.push(arr[i]);
        } else {
            result = true;
            for (j = 0; j < newArr.length; j++) {
                if (arr[i] === newArr[j]) {
                    result = false;
                    break;
                }
            }
            if (result) {
                newArr.push(arr[i]);
            }
        }

    }
    return newArr;
}

console.log(removeSame([1, 2, 3, 4, 5, 1, 3, 4, 6, 7, 8, 9, 7, 8]));

// 16. Дараалсан бүхэл тоонуудаас бүрдсэн массив байв. Даанч нэг тоо нь алга болчиж. Алга болсон тоог ол.

function findElement(arr) {
    let max = 0, min, origin = 0, diff = 0, sum = 0;
    for (i = 0; i < arr.length; i++) {
        if (arr[i] >= max) {
            max = arr[i];
        }
        sum = sum + arr[i]
    }
    min = max;
    for (i = 0; i < arr.length; i++) {
        if (arr[i] <= min) {
            min = arr[i];
        }
    }
    for (i = min; i <= max; i++) {
        origin = origin + i;
    }
    return diff = origin - sum;
}
console.log('find:' + findElement([2, 3, 4, 5, 9, 8, 6]))

// 17. N тоо өгөгдөв. Паскалын гурвалжны N дахь мөрийг хэвлэ.
function pascal(num) {
    let k = 0, arr = [];
    for (let i = 0; i <= num; i++) {
        arr.push(factorial(num) / ((factorial(i) * factorial(num - i))));
    }
    return arr;
}
console.log("pascal" + pascal(6));




// object ashiglan ijil array has 
function remove(arr) {
    let map = {};
    for (let i = 0; i < arr.length; i++) {
        console.log('map; ' + map[arr[i]])
        if (map[arr[i]]) {
            map[arr[i]]++;
        } else {
            map[arr[i]] = 1;
        }
    }
}

remove([1, 2, 2, 3, 4])
// 18. Өгсөн 2 тооны хамгийн их ерөнхий хуваагчийг ол.

function great(a, b) {
    let max = a, min = b;

    if (b > max) {
        max = b;
        min = a;
    }

    while (min > 0) {
        let save = min;
        min = max % min;
        max = save;
    }

    return max;
}

great(481, 629)
// 19. Цифрүүдийн кубуудын нийлбэр нь өөртэйгөө тэнцүү байдаг бүх 3 оронтой тоог ол.
function wakeru(num) {
    let n = num;
    let arr = [];
    while (n >= 1) {
        arr.push(n % 10);
        n = Math.trunc(n = n / 10);
    }
    return arr;
}
function check(num) {
    let sum = 0, n = num, arr = [], result = 0;
    while (n >= 1) {
        arr.push(n % 10);
        n = Math.trunc(n = n / 10);
    }
    for (i = 0; i < arr.length; i++) {
        sum = sum + (arr[i] ** 3);
    }
    if (num === sum) {
        console.log('bingo' + num);
        result = num;
    }
    // console.log('array: ' + arr + 'sum: ' + sum);
    return result;
}

function test() {
    for (let i = 100; i <= 999; i++) {
        check(i);
    }
}

console.log(test());
// let n = num, sum = 0;
// let arr = [];
// let result = true;
// while (n >= 1) {
//     arr.push(n % 10);
//     n = Math.trunc(n = n / 10);
// }
// for (let index = 100; index <= 999; index++) {
//     arr = wakeru(index);
//     for (i = 0; i < arr.length; i++) {
//         sum = sum + (arr[i] ** 3);
//         console.log(sum);
//         if (num === sum) {
//             console.log("sum " + sum + 'num: ' + num);
//         }
//     }
// }





// 20. N тоо болон массив өгөгдөв. Нийлбэр нь N байх 2 тоог олж index ийг нь буцаа. олдохгүй бол “Error” буцаа.
// function sum(num, arr) {
//     let index1 = null, index2 = null, remain = 0;
//     for (let i = 0; i < arr.length; i++) {
//         remain = num - arr[i];
//         if (remain > 0) {
//             for (let j = i + 1; j < arr.length; j++) {
//                 if (arr[j] === remain) {
//                     index1 = i;
//                     index2 = j;
//                     break;
//                 }
//             }
//         }
//     }
//     if (index1 === null) {
//         return "error"
//     } else {
//         return [index1, index2]

//     }
// }
// console.log(sum(15, [11, 5, 3, 16, 4, -5, 20, -16, 1]))

function sum(num, arr) {
    let index1 = null, index2 = null, remain = 0;
    for (let i = 0; i < arr.length; i++) {
        remain = num - arr[i];
        console.log(remain);

        for (let j = i + 1; j < arr.length; j++) {
            console.log('arrj: ' + arr[j]);
            if (arr[j] === remain) {
                console.log('bingo');
                index1 = i;
                index2 = j;
                return [index1, index2]
            }
        }

    }
    if (index1 === null) {
        return "error"
    } else {
        return [index1, index2]

    }
}
console.log(sum(15, [-5, 3, 2, 8, 16, 4, 20, -5, -16, 31, 20]))

// 21. Өгөгдсөн массивийг өсөх эрэмбээр эрэмблэ

// array find min value 

function arrayMin(arr) {
    let min = arr[0], index = null;
    for (i = 0; i < arr.length; i++) {
        if (min >= arr[i]) {
            min = arr[i];
            index = i;
        }
    }
    return [index, min];
}

function upper(arr) {
    if (arr.length === 0) {
        return "error";
    } else {
        let newArr = [], minArr = [], i = 0;
        while (arr.length > 0) {
            minArr = arrayMin(arr);
            newArr.push(minArr[1]);
            arr.splice(minArr[0], 1);
            i++;
        }
        return newArr;
    }

}
console.log(upper([3, 1, 5, 2, 6, 8, 0, 10, -2, -5]))


// 7. massive ogtloltsol
function arrayInstrection(arr1, arr2) {
    let map = {}, newArr = [];
    for (i = 0; i < arr1.length; i++) {
        if (map[arr1[i]] === undefined) {
            map[arr1[i]] = 1;
        } else {
            map[arr1[i]]++;
        }
    }
    for (let i = 0; i < arr2.length; i++) {
        if (map[arr2[i]]) {
            newArr.push(arr2[i]);
            map[arr2[i]]--;
        }
    }

    console.log(newArr);
    // return newArr;
}
const arr0 = [1, 3, 2, 1, 3, 2, 5], arr3 = [1, 1, 1];
console.log(arrayInstrection(arr0, arr3));


// function remove(arr) {
//     let map = {};
//     for (let i = 0; i < arr.length; i++) {
//         console.log('map; ' + map[arr[i]])
//         if (map[arr[i]]) {
//             map[arr[i]]++;
//         } else {
//             map[arr[i]] = 1;
//         }
//     }
//     console.log(map);
// }
// remove([2, 5, 7, 9, 2, 5])
// function rm(arr, arr2) {
//     let map = {};
//     for (let i = 0; i < arr.length; i++) {
//         map[i] = arr[i];
//     }
//     console.log(map);
// }
// rm([2, 5, 7, 9, 2, 5], [2, 1, 5, 6])

// function testo(arr, arr2) {
//     for (let i = 0; i < arr.length; i++) {
//         console.log(arr2[arr[i]]);
//         if (arr2[arr[i]]) {
//             console.log('logdesu: ' + arr[i]);
//         } else {
//             // arr2[arr[i]] = 1;
//         }
//     }
//     console.log(arr2)
// }
// // testo([1, 2, 3, 1, 1], [4, 5, 1, 5, 1, 6, 2])

const recursive = (n) => {
    if (n == 1) return 1;
    return n * recursive(n - 1);
}

console.log(recursive(5));

const pascalRecursive = (n) => {
    if (n === 1) return [1]

    const prev = pascalRecursive(n - 1);

    const current = [1];

    for (let i = 0; i < prev.length; i++) {
        current.push(prev[i] + prev[i + 1])
    }

    current.push(1);

    return current;
}
let sum = 0;




array([2, 3, 1, 3, 4, 5, 6, 8, 10])


// selection, insertion

const array = (arr) => {
    let min = 0;
    arr.forEach(element => {
        for (let i = 0; i < array.length; i++) {
            min = arr[i];


        }
    });
}











































































































































































































































































































































































































































































































































































